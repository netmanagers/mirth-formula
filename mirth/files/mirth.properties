{%- from "mirth/map.jinja" import mirth with context -%}
# This file is managed by salt. Manual changes risk being overwritten.
# Modify the values passed to the tomcat pillar instead.

# Mirth Connect configuration file

# directories
dir.appdata = {{ mirth.config.dir_appdata }}
dir.tempdata = {{ mirth.config.dir_tempdata }}

# ports
http.port = {{ mirth.config.http_port }}
https.port = {{ mirth.config.https_port }}

# password requirements
password.minlength = {{ mirth.config.password_minlength }}
password.minupper = {{ mirth.config.password_minupper }}
password.minlower = {{ mirth.config.password_minlower }}
password.minnumeric = {{ mirth.config.password_minnumeric }}
password.minspecial = {{ mirth.config.password_minspecial }}
password.retrylimit = {{ mirth.config.password_retrylimit }}
password.lockoutperiod = {{ mirth.config.password_lockoutperiod }}
password.expiration = {{ mirth.config.password_expiration }}
password.graceperiod = {{ mirth.config.password_graceperiod }}
password.reuseperiod = {{ mirth.config.password_reuseperiod }}
password.reuselimit = {{ mirth.config.password_reuselimit }}

# keystore
keystore.path = {{ mirth.config.keystore_path }}
keystore.storepass = {{ mirth.config.keystore_storepass }}
keystore.keypass = {{ mirth.config.keystore_keypass }}
keystore.type = {{ mirth.config.keystore_type }}

# server
http.contextpath = {{ mirth.config.http_contextpath }}
server.url = {{ mirth.config.server_url }}

http.host = {{ mirth.config.http_host }}
https.host = {{ mirth.config.https_host }}

https.client.protocols = {{ mirth.config.https_client_protocols | join(',') }}
https.server.protocols = {{ mirth.config.https_server_protocols | join(',') }}
https.ciphersuites = {{ mirth.config.https_ciphersuites | join(',') }}

# Determines whether or not channels are deployed on server startup.
server.startupdeploy = {{ mirth.config.server_startupdeploy }}

# Determines whether libraries in the custom-lib directory will be included on the server classpath.
# To reduce potential classpath conflicts you should create Resources and use them on specific channels/connectors instead, and then set this value to false.
server.includecustomlib = {{ mirth.config.server_includecustomlib }}

# administrator
administrator.maxheapsize = {{ mirth.config.maxheapsize }}

# properties file that will store the configuration map and be loaded during server startup
configurationmap.path = {{ mirth.config.configurationmap_path }}

# options: derby, mysql, postgres, oracle, sqlserver
database = {{ mirth.config.database }}

# examples:
#       Derby           jdbc:derby:${dir.appdata}/mirthdb;create=true
#       PostgreSQL      jdbc:postgresql://localhost:5432/mirthdb
#       MySQL           jdbc:mysql://localhost:3306/mirthdb
#       Oracle          jdbc:oracle:thin:@localhost:1521:DB
#       SQLServer       jdbc:jtds:sqlserver://localhost:1433/mirthdb
database.url = {{ mirth.config.database_url }}

# if using a custom driver, specify it here
{% if mirth.config.database_driver is defined -%}
database.driver = {{ mirth.config.database_driver }}
{% else -%}
#database.driver = 
{%- endif %}

# maximum number of connections allowed for the connection pool
database.max-connections = {{ mirth.config.database_max_connections }}

# database credentials
database.username = {{ mirth.config.database_user }}
database.password = {{ mirth.config.database_password }}
